#include <iostream>
#include <cstring>

template <class T, int size> // size is the expression parameter
class StaticArray
{
private:
	// The expression parameter controls the size of the array
	T m_array[size];

public:
	T* getArray() { return m_array; }

	T& operator[](int index)
	{
		return m_array[index];
	}
};

template <typename T, int size>
void print(StaticArray<T, size> &array)
{
	for (int count = 0; count < size; ++count)
		std::cout << array[count] << ' ';
}

// Override print() for fully specialized StaticArray<char, 14>
template <>
void print(StaticArray<char, 14> &array)
{
	for (int count = 0; count < 14; ++count)
		std::cout << array[count];
}

int main()
{
	// declare an char array
	StaticArray<char, 12> char12;

	strcpy_s(char12.getArray(), 12, "Hello, mom!");

	// Print the array
	print(char12);

	return 0;
}